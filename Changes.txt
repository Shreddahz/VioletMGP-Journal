Shaheer - Create template

settings:
# Used in CreateJournalView to give correct redirect
CUSTOM_TEMPLATE_NAME = 'Custom Template'


# All default templates are given to the user @all, and all users can see them
DEFAULT_TEMPLATES_OWNER_USERNAME = '@all'

# File Path to default templates
PATH_TO_TEMPLATES_JSON = "journals/templates.json"

management:
NEWFILE: createtemplate.py

import json
from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from journals.models import Template, User


class Command(BaseCommand):
    """Command to create default templates"""
    owner = User.objects.get(username=settings.DEFAULT_TEMPLATES_OWNER_USERNAME)
    help = "Create a new default template that will be added to templates.json"

    def handle(self, *args, **options):
        
        template_data = self._get_input_data_as_dict()
        self._create_template(template_data=template_data)
        self.add_new_template_to_default_templates(template_data=template_data)

    def add_new_template_to_default_templates(self, template_data):
        existing_templates = self._get_existing_templates()
        existing_templates = [template_data] + existing_templates
        print(existing_templates)
        self._write_to_templates_json_file(existing_templates)

    def _get_existing_templates(self):
        with open(settings.PATH_TO_TEMPLATES_JSON, "r") as template_file:
            return json.load(template_file)
        
    def _write_to_templates_json_file(self, template_list):
        with open(settings.PATH_TO_TEMPLATES_JSON, 'w') as template_file:
            json.dump(template_list, template_file, indent=2)
    
    def _create_template(self, template_data):
        Template.objects.create(
            owner=self.owner,
            name=template_data['template_name'],
            questions=template_data['questions']
        )

    def _get_input_data_as_dict(self):
        template_name = input("Enter the name of the default template: ")
        questions = input("Enter the questions separated by a (,): ").split(',')
        stripped_questions = [question.strip() for question in questions if question.strip()]

        template_data = {
            'template_name':template_name,
            'questions': stripped_questions
        }

        return template_data


NEWFILE: startserver.py
"""Creates a new runserver command that checks if the default_templates_owner user exists,
    If they do not exist, create that user and assign
    the default templates to them
"""
import os
from os import environ
from django.core.management.commands.runserver import Command as BaseRunserverCommand
from django.conf import settings
from journals.models import Template, User
import json

class Command(BaseRunserverCommand):

    help = "Check if the default templates have been created before running server"
    def handle(self, *args, **options):
        if environ.get('RUN_MAIN') != 'true':
            self._check_for_default_models()
        super().handle(*args, **options)
        
        
                
    def _check_for_default_models(self):
        self.stdout.write(self.style.WARNING(f'CHECKING DATABASE FOR {settings.DEFAULT_TEMPLATES_OWNER_USERNAME}'))
        if not User.objects.filter(username=settings.DEFAULT_TEMPLATES_OWNER_USERNAME).exists():
            self.stdout.write(self.style.WARNING(f'{settings.DEFAULT_TEMPLATES_OWNER_USERNAME} NOT FOUND \nCREATING {settings.DEFAULT_TEMPLATES_OWNER_USERNAME}'))
            default_template_owner = self._set_up_database_with_default_user()   
        
        else:
            self.stdout.write(self.style.SUCCESS(f'{settings.DEFAULT_TEMPLATES_OWNER_USERNAME} FOUND'))
            default_template_owner = User.objects.get(username=settings.DEFAULT_TEMPLATES_OWNER_USERNAME)
        self._create_default_templates(default_template_owner)
    
        
    def _set_up_database_with_default_user(self):
        default_template_owner = User.objects.create_user(
            username= settings.DEFAULT_TEMPLATES_OWNER_USERNAME,
            first_name= 'All',
            last_name= 'All',
            email= 'all@journalsapp.com',
            password= 'DefaultUserAllPassword270224'
        )
        self.stdout.write(self.style.SUCCESS(f'{settings.DEFAULT_TEMPLATES_OWNER_USERNAME} WAS SUCCESSFULLY CREATED'))
        return default_template_owner
        
    
    def _create_default_templates(self, all_user):
        self.stdout.write(self.style.WARNING('CHECKING IF DEFAULT TEMPLATES HAVE BEEN CREATED'))
        default_templates = self._get_templates_from_json_file()
        for template in default_templates:
            if not Template.objects.filter(owner=all_user).filter(name=template['template_name']).exists():
                self.stdout.write(self.style.WARNING(f'TEMPLATE DOES NOT EXIST \nCREATING {template["template_name"]} TEMPLATE'))
                Template.objects.create(
                    name=template['template_name'],
                    owner=all_user,
                    questions=template['questions']
                )
        
        self.stdout.write(self.style.SUCCESS('ALL DEFAULT TEMPLATES EXIST'))

    def _get_templates_from_json_file(self):
        with open(settings.PATH_TO_TEMPLATES_JSON, "r") as template_file:
            return json.load(template_file)



NEWFILE:
templates.json
[
  {
    "template_name": "Base Template",
    "questions": [
      "What did you do today?",
      "rate your day on a scale of 1-10"
    ]
  },
  {
    "template_name": "Custom Template",
    "questions": []
  }
]


views.py:

class CreateJournalView(LoginRequiredMixin, View):
    """Display the create_journal screen and handle journal creations"""
    template_name = 'create_journal.html'
    http_method_names = ['get', 'post']
    def get(self,request):
        form = CreateNewJournal(user=request.user)
        journal_list = request.user.get_associated_journals()
        return render(request, "create_journal.html", {"form": form, "journal_list": journal_list})

    def post(self,request):
        form = CreateNewJournal(request.POST, user=request.user)
        if form.is_valid():
            j_name = form.cleaned_data["journal_name"]
            j_template = form.cleaned_data["template"]
            if is_custom_template(j_template):  <-- Changed line
                return redirect_to_custom_template_view(request=request, journal_name=j_name)
            j = Journal.objects.create(name=j_name, owner=request.user, template=j_template)
            
            messages.add_message(self.request, messages.SUCCESS, "Journal created!")
        else:
            messages.add_message(self.request, messages.ERROR, "Journal could not be created.")

        return redirect(reverse(settings.JOURNAL_HOME_URL))
    